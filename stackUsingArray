#include <stdio.h>
#include <stdlib.h>

#define SIZE 5

typedef struct {
    int stack[SIZE];
    int top;
}
Stack;

void initStack(Stack * s) {
    s -> top = -1;
}

void push(Stack * s) {
    int data;
    printf("Enter data for push: ");
    scanf("%d", & data);
    if (s -> top == SIZE - 1) {
        printf("Stack Overflow\n");
    } else {
        s -> top++;
        s -> stack[s -> top] = data;
    }
}

void pop(Stack * s) {
    if (s -> top == -1) {
        printf("Stack Underflow\n");
    } else {
        int item = s -> stack[s -> top];
        s -> top--;
        printf("Popped element is %d\n", item);
    }
}

void peek(Stack * s) {
    if (s -> top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Top element is %d\n", s -> stack[s -> top]);
    }
}

void isEmpty(Stack * s) {
    if (s -> top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Stack is not empty\n");
    }
}

void findSize(Stack * s) {
    if (s -> top == -1) {
        printf("Stack is empty\n");
    } else {
        printf("Size of stack is %d\n", s -> top + 1);
    }
}

int main() {
    Stack myStack;
    initStack( & myStack);
    printf("1. Push element onto stack\n");
    printf("2. Pop an element from stack\n");
    printf("3. Find top element of stack\n");
    printf("4. Check if stack is empty\n");
    printf("5. Find size of stack\n");
    printf("0. Exit\n");
    int choice;
    do {

        printf("Enter your choice: ");
        scanf("%d", & choice);
        switch (choice) {
        case 1:
            push( & myStack);
            break;
        case 2:
            pop( & myStack);
            break;
        case 3:
            peek( & myStack);
            break;
        case 4:
            isEmpty( & myStack);
            break;
        case 5:
            findSize( & myStack);
            break;
        case 0:
            printf("Exiting...\n");
            break;
        default:
            printf("Enter a valid choice\n");
            break;
        }
    } while (choice != 0);

    return 0;
}

